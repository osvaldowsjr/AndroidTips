To save states on android app:
  - Android may destroy your activity if:
    - Not enough memory
    - Rotate screen
    - Turning off the screen for a long time
  - To avoid that you can use:
    override fun onSaveInstanceState
      -> Use the outState bundle to save information that you want to persist with your state
    override fun onRestoreInstanceState
      -> savedInstanceState would work as the same bundle as outState bundle of onSaveInstaceState
      -> We can also use the onCreate Bundle to perform the same action
      
==========================================================================================================================================

Generic Listener
  -If you've buttons that have similar actions, you can create a generic listener and re-utilize it
    -val listener = View.OnClickListener {
            val b = it as Button
            newNumber.append(b.text)
        }
        button0.setOnClickListener(listener)

===========================================================================================================================================

Lateinit and lazy initializers
  - Lateinit allows the compiler to recognize that the value of non-null property isn't stored in the constructor stage 
    - However, to use the lateinit modifier, we must use it as var, it may cause problems as it might be changed during the execution of the code
  - by lazy modfier is useful to implement a read-only property with lazy-initialization
    - performs it initilizer where the defined property is first used, not its declaration
	- Can be treated differently according to its mode 
		- SYNCHRONIZED 
			- The initialization will only be exectued on the first thread that is called
			- Other threads will then refer to the value cached
			- Default Mode
		- PUBLICATION
			- It can be called from mutilple thread at the same time, and initialization can be done simustaneously on all or part of the threads
			- However, if it was already initialized, it will be returned without doing a initialization
		- NONE
			- Unsafe, no consideration for multi-threads
			= Simply initilizes it at first access or returns the stored value
			
===========================================================================================================================================

Guidelines
	- It is possible to create a guideline on the blueprint view to anchor your layout using constraint layout
	- It has vertical (Horizontal align) and horizontal (Vertical align)
	- Useful for positioning widgets on a certain percentage of the screen

===========================================================================================================================================

Baseline constraint
	- Using the baseline constraint you can align the up and the bottom of a widget to another using only one constraint
	- It will align texts of a button for example

===========================================================================================================================================

Coroutines
	- Threads vs Coroutines
		- Threads allows us to do some task outside the main thread, however, you might end up with a bunch of hidden callbacks and might be not
		able to update the UI easily
		- Coroutines makes our code shorter and easier to deal with the UI thread
	-Dispatchers
		- Dispatchers specifies where the coroutines should run
			- Dispatchers.Main
				- Use this to run a coroutine on the main thread of android
				- Should be only used to update UI and performing quick work
			- Dispatchers.IO
				- Dispatchers optimized to make disk or network I/O outside the main thread
				- API requests, downloads, search for a file inside android
			- Dispatchers.Default
				- Optimized to run CPU-intensive work outside the main thread
	- CoroutineScope
		- To call a suspend function (Functions that uses coroutines), we need to have a CoroutineScope
		- CoroutineScope are simply a way to start and terminate our coroutines 
		- Is responsable of avoiding memory leaks by terminating the coroutine when a user leaves a content area within our app

===========================================================================================================================================

ListView/RecyclerView
	- Adapter
		- ListView
			- To create a custom adapter for our ListView, we must extend the arrayAdapter
			- We must use the constructor of array adapter
			- To use this adapter, you must inflate the XML
				- LayoutInflater.from(context)
					- Context is used to set a series of information to our inflater, like the size of the screen
			- Override basically 2 methods
				- GetCount
					- Basically must return the size of our list, to control the sidebar as an example
				- getView
					- Where we set the information on each item that is going to be shown
					- It is important to use the convertView
						- If there is a view that can be reutilized by android, the system will flag it on convertView
						- Basically we must check if it's null -> if the convertView is null we are going to create a new view, else we are going to asign our view to the convertView
						- if(convertView == null){
							view = inflater.inflate(...)
						}else view = convertView
			- ViewHolder pattern
				- Remove the findViewByID
					- Can reuse it's reference to spare memory and time within our app
				- We need to create a ViewHolder instance everytime a new view is created
					- However if we use the convertView to reuse our views, the ViewHolder instance can also be reused
				- Access the widgets through ViewHolder
				- Use the property tag of the view to store its ViewHolder (Android framework won't use this tag attribute, so we can be sure that only our viewHolder gonna be there)
					-view.tag = viewHolder
					-viewHolder = view.tag as ViewHolder
		-RecyclerView
			- Basically the same implementation of the ListView with ViewHolder pattern

===========================================================================================================================================

Automatic imports
	-Settings
		-Editor
			-General
				-Auto Import
					- Insert imports on Paste (choose all from the dropdown)
					- Check "Add unambiguos imports on the fly" and "Optimize imports on the fly"